/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package avance_de_proyecto;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author diego
 */
public class Gui_del_proyecto extends javax.swing.JFrame {

    /**
     * Creates new form Gui_del_proyecto
     */
    public Gui_del_proyecto() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JD_MenuCampos = new javax.swing.JDialog();
        jb_cerrararchivo = new javax.swing.JButton();
        jb_salirdemenucampos = new javax.swing.JButton();
        BTN_CrearCampos = new javax.swing.JButton();
        BTN_ModificarCampos = new javax.swing.JButton();
        BTN_ListarCampos = new javax.swing.JButton();
        BTN_BorrarCampos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jb_guardararchivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        JD_CrearCampos = new javax.swing.JDialog();
        jP_crear_campos = new javax.swing.JPanel();
        BTN_RegresarCrearCampos = new javax.swing.JButton();
        TF_NombreCampo = new javax.swing.JTextField();
        SP_TamañoMinimo = new javax.swing.JSpinner();
        SP_TamañoMaximo = new javax.swing.JSpinner();
        CB_TipoDeDato = new javax.swing.JComboBox<>();
        RB_LlavePrimariaSi = new javax.swing.JRadioButton();
        RB_LlavePrimariaNo = new javax.swing.JRadioButton();
        btn_crear_campo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        JD_ModificarCampos = new javax.swing.JDialog();
        RB_ModificarLlaveNO = new javax.swing.JPanel();
        BTN_RegresarModificarCampos = new javax.swing.JButton();
        BTN_Modificar = new javax.swing.JButton();
        TF_ModificarCampoNombre = new javax.swing.JTextField();
        CB_ModificarCampo = new javax.swing.JComboBox<>();
        CB_ModificarTipoDato = new javax.swing.JComboBox<>();
        SP_ModificarMinimo = new javax.swing.JSpinner();
        SP_ModificarMaximo = new javax.swing.JSpinner();
        RB_ModificarLlaveSi = new javax.swing.JRadioButton();
        RB_ModificarLlaveNo = new javax.swing.JRadioButton();
        JD_ListarCampos = new javax.swing.JDialog();
        jP_listar_campos = new javax.swing.JPanel();
        BTN_RegresarListarCampos = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TA_ListarCampos = new javax.swing.JTextArea();
        JD_BorrarCampos = new javax.swing.JDialog();
        jP_borrar_campos = new javax.swing.JPanel();
        btn_borrar_campo = new javax.swing.JButton();
        btn_regresar_borrar_campos = new javax.swing.JButton();
        CB_BorrarCampos = new javax.swing.JComboBox<>();
        btng_llave = new javax.swing.ButtonGroup();
        btng_modificar_llave = new javax.swing.ButtonGroup();
        jb_nuevo_archivo = new java.awt.Button();
        jb_abrir_archivo = new java.awt.Button();
        jb_salir = new java.awt.Button();

        jb_cerrararchivo.setText("Cerrar Archivo");
        jb_cerrararchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_cerrararchivoMouseClicked(evt);
            }
        });

        jb_salirdemenucampos.setText("Salir");
        jb_salirdemenucampos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_salirdemenucamposMouseClicked(evt);
            }
        });
        jb_salirdemenucampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salirdemenucamposActionPerformed(evt);
            }
        });

        BTN_CrearCampos.setText("Crear Campos");
        BTN_CrearCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CrearCamposActionPerformed(evt);
            }
        });

        BTN_ModificarCampos.setText("Modificar Campos");
        BTN_ModificarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ModificarCamposActionPerformed(evt);
            }
        });

        BTN_ListarCampos.setText("Listar Campos");
        BTN_ListarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ListarCamposActionPerformed(evt);
            }
        });

        BTN_BorrarCampos.setText("Borrar Campos");
        BTN_BorrarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BorrarCamposActionPerformed(evt);
            }
        });

        jLabel1.setText("Menu de Campos");

        jb_guardararchivo.setText("Salvar Archivo");
        jb_guardararchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_guardararchivoMouseClicked(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane1.setViewportView(jTextArea2);

        javax.swing.GroupLayout JD_MenuCamposLayout = new javax.swing.GroupLayout(JD_MenuCampos.getContentPane());
        JD_MenuCampos.getContentPane().setLayout(JD_MenuCamposLayout);
        JD_MenuCamposLayout.setHorizontalGroup(
            JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                .addGroup(JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jb_salirdemenucampos))
                    .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addGroup(JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BTN_CrearCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jb_guardararchivo)
                                .addComponent(jb_cerrararchivo)
                                .addComponent(BTN_ModificarCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addComponent(jLabel1))
                                .addComponent(BTN_ListarCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BTN_BorrarCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JD_MenuCamposLayout.createSequentialGroup()
                    .addContainerGap(23, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(211, Short.MAX_VALUE)))
        );
        JD_MenuCamposLayout.setVerticalGroup(
            JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(BTN_CrearCampos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_ModificarCampos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BTN_ListarCampos)
                        .addGap(18, 18, 18)
                        .addComponent(BTN_BorrarCampos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jb_guardararchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jb_cerrararchivo)
                        .addGap(64, 64, 64))
                    .addGroup(JD_MenuCamposLayout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jb_salirdemenucampos)
                        .addContainerGap(28, Short.MAX_VALUE))))
            .addGroup(JD_MenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JD_MenuCamposLayout.createSequentialGroup()
                    .addContainerGap(31, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(141, Short.MAX_VALUE)))
        );

        jP_crear_campos.setBackground(new java.awt.Color(255, 255, 255));

        BTN_RegresarCrearCampos.setText("Regresar");
        BTN_RegresarCrearCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_RegresarCrearCamposActionPerformed(evt);
            }
        });

        CB_TipoDeDato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "int", "byte", "short", "double", "float", "long", "char", "string", "boolean" }));

        btng_llave.add(RB_LlavePrimariaSi);
        RB_LlavePrimariaSi.setText("SI");

        btng_llave.add(RB_LlavePrimariaNo);
        RB_LlavePrimariaNo.setText("NO");

        btn_crear_campo.setText("Crear Campo");
        btn_crear_campo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_crear_campoActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre");

        jLabel3.setText("Tipo de Dato");

        jLabel4.setText("Longitud");

        jLabel5.setText("Mínima");

        jLabel6.setText("Máxima");

        jLabel7.setText("¿Es una llave primaria?");

        javax.swing.GroupLayout jP_crear_camposLayout = new javax.swing.GroupLayout(jP_crear_campos);
        jP_crear_campos.setLayout(jP_crear_camposLayout);
        jP_crear_camposLayout.setHorizontalGroup(
            jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_crear_camposLayout.createSequentialGroup()
                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jP_crear_camposLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jP_crear_camposLayout.createSequentialGroup()
                                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addGap(59, 59, 59)
                                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SP_TamañoMinimo)
                                    .addComponent(RB_LlavePrimariaSi, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(38, 38, 38)
                                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(RB_LlavePrimariaNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SP_TamañoMaximo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE))
                            .addGroup(jP_crear_camposLayout.createSequentialGroup()
                                .addComponent(BTN_RegresarCrearCampos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_crear_campo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jP_crear_camposLayout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CB_TipoDeDato, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TF_NombreCampo))))
                .addGap(26, 26, 26))
        );
        jP_crear_camposLayout.setVerticalGroup(
            jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_crear_camposLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TF_NombreCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CB_TipoDeDato, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SP_TamañoMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SP_TamañoMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(27, 27, 27)
                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RB_LlavePrimariaSi)
                    .addComponent(RB_LlavePrimariaNo)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addGroup(jP_crear_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_RegresarCrearCampos)
                    .addComponent(btn_crear_campo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout JD_CrearCamposLayout = new javax.swing.GroupLayout(JD_CrearCampos.getContentPane());
        JD_CrearCampos.getContentPane().setLayout(JD_CrearCamposLayout);
        JD_CrearCamposLayout.setHorizontalGroup(
            JD_CrearCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_crear_campos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JD_CrearCamposLayout.setVerticalGroup(
            JD_CrearCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_crear_campos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        RB_ModificarLlaveNO.setBackground(new java.awt.Color(255, 255, 255));

        BTN_RegresarModificarCampos.setText("Regresar");
        BTN_RegresarModificarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_RegresarModificarCamposActionPerformed(evt);
            }
        });

        BTN_Modificar.setText("Modificar Campos");
        BTN_Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ModificarActionPerformed(evt);
            }
        });

        CB_ModificarCampo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_ModificarCampoItemStateChanged(evt);
            }
        });

        CB_ModificarTipoDato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "int", "byte", "short", "double", "float", "long", "char", "string", "boolean" }));

        btng_modificar_llave.add(RB_ModificarLlaveSi);
        RB_ModificarLlaveSi.setText("SI");

        btng_modificar_llave.add(RB_ModificarLlaveNo);
        RB_ModificarLlaveNo.setText("NO");

        javax.swing.GroupLayout RB_ModificarLlaveNOLayout = new javax.swing.GroupLayout(RB_ModificarLlaveNO);
        RB_ModificarLlaveNO.setLayout(RB_ModificarLlaveNOLayout);
        RB_ModificarLlaveNOLayout.setHorizontalGroup(
            RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RB_ModificarLlaveNOLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(RB_ModificarLlaveNOLayout.createSequentialGroup()
                        .addComponent(BTN_RegresarModificarCampos)
                        .addGap(132, 132, 132)
                        .addComponent(BTN_Modificar))
                    .addComponent(CB_ModificarCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TF_ModificarCampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CB_ModificarTipoDato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RB_ModificarLlaveNOLayout.createSequentialGroup()
                            .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(RB_ModificarLlaveSi)
                                .addComponent(SP_ModificarMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(SP_ModificarMaximo)
                                .addComponent(RB_ModificarLlaveNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        RB_ModificarLlaveNOLayout.setVerticalGroup(
            RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RB_ModificarLlaveNOLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(CB_ModificarCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TF_ModificarCampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CB_ModificarTipoDato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SP_ModificarMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SP_ModificarMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RB_ModificarLlaveSi)
                    .addComponent(RB_ModificarLlaveNo))
                .addGap(58, 58, 58)
                .addGroup(RB_ModificarLlaveNOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_RegresarModificarCampos)
                    .addComponent(BTN_Modificar))
                .addContainerGap(139, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout JD_ModificarCamposLayout = new javax.swing.GroupLayout(JD_ModificarCampos.getContentPane());
        JD_ModificarCampos.getContentPane().setLayout(JD_ModificarCamposLayout);
        JD_ModificarCamposLayout.setHorizontalGroup(
            JD_ModificarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JD_ModificarCamposLayout.createSequentialGroup()
                .addComponent(RB_ModificarLlaveNO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        JD_ModificarCamposLayout.setVerticalGroup(
            JD_ModificarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RB_ModificarLlaveNO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jP_listar_campos.setBackground(new java.awt.Color(255, 255, 255));

        BTN_RegresarListarCampos.setText("Regresar");
        BTN_RegresarListarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_RegresarListarCamposActionPerformed(evt);
            }
        });

        TA_ListarCampos.setColumns(20);
        TA_ListarCampos.setRows(5);
        jScrollPane2.setViewportView(TA_ListarCampos);

        javax.swing.GroupLayout jP_listar_camposLayout = new javax.swing.GroupLayout(jP_listar_campos);
        jP_listar_campos.setLayout(jP_listar_camposLayout);
        jP_listar_camposLayout.setHorizontalGroup(
            jP_listar_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_listar_camposLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_listar_camposLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTN_RegresarListarCampos)
                .addGap(200, 200, 200))
        );
        jP_listar_camposLayout.setVerticalGroup(
            jP_listar_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_listar_camposLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(BTN_RegresarListarCampos)
                .addContainerGap())
        );

        javax.swing.GroupLayout JD_ListarCamposLayout = new javax.swing.GroupLayout(JD_ListarCampos.getContentPane());
        JD_ListarCampos.getContentPane().setLayout(JD_ListarCamposLayout);
        JD_ListarCamposLayout.setHorizontalGroup(
            JD_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_listar_campos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JD_ListarCamposLayout.setVerticalGroup(
            JD_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_listar_campos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jP_borrar_campos.setBackground(new java.awt.Color(255, 255, 255));

        btn_borrar_campo.setText("Borrar Campo");
        btn_borrar_campo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_borrar_campoActionPerformed(evt);
            }
        });

        btn_regresar_borrar_campos.setText("Regresar");
        btn_regresar_borrar_campos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_regresar_borrar_camposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_borrar_camposLayout = new javax.swing.GroupLayout(jP_borrar_campos);
        jP_borrar_campos.setLayout(jP_borrar_camposLayout);
        jP_borrar_camposLayout.setHorizontalGroup(
            jP_borrar_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_borrar_camposLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jP_borrar_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CB_BorrarCampos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jP_borrar_camposLayout.createSequentialGroup()
                        .addComponent(btn_regresar_borrar_campos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                        .addComponent(btn_borrar_campo)))
                .addGap(52, 52, 52))
        );
        jP_borrar_camposLayout.setVerticalGroup(
            jP_borrar_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_borrar_camposLayout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addComponent(CB_BorrarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135)
                .addGroup(jP_borrar_camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_regresar_borrar_campos)
                    .addComponent(btn_borrar_campo))
                .addGap(73, 73, 73))
        );

        javax.swing.GroupLayout JD_BorrarCamposLayout = new javax.swing.GroupLayout(JD_BorrarCampos.getContentPane());
        JD_BorrarCampos.getContentPane().setLayout(JD_BorrarCamposLayout);
        JD_BorrarCamposLayout.setHorizontalGroup(
            JD_BorrarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_borrar_campos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JD_BorrarCamposLayout.setVerticalGroup(
            JD_BorrarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_borrar_campos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("principal");
        setName("principal"); // NOI18N

        jb_nuevo_archivo.setLabel("Nuevo Archivo");
        jb_nuevo_archivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_nuevo_archivoMouseClicked(evt);
            }
        });
        jb_nuevo_archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_nuevo_archivoActionPerformed(evt);
            }
        });

        jb_abrir_archivo.setLabel("Abrir Archivo");
        jb_abrir_archivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_abrir_archivoMouseClicked(evt);
            }
        });

        jb_salir.setLabel("Salir");
        jb_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_salirMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jb_abrir_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jb_nuevo_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(jb_salir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(356, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jb_nuevo_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_abrir_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jb_salir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_nuevo_archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_nuevo_archivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_nuevo_archivoActionPerformed

    private void jb_salirdemenucamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salirdemenucamposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_salirdemenucamposActionPerformed

    private void BTN_BorrarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BorrarCamposActionPerformed
        // TODO add your handling code here:
        JD_MenuCampos.setVisible(false);
        JD_BorrarCampos.setModal(true);
        JD_BorrarCampos.pack();
        JD_BorrarCampos.setLocationRelativeTo(this);
        JD_BorrarCampos.setVisible(true);
    }//GEN-LAST:event_BTN_BorrarCamposActionPerformed

    private void jb_salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_salirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jb_salirMouseClicked

    private void jb_nuevo_archivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_nuevo_archivoMouseClicked
        // TODO add your handling code here:
        JFileChooser guardarcomo = new JFileChooser();
        guardarcomo.setApproveButtonText("Guardar");
        guardarcomo.showSaveDialog(null);
        File archivo = new File(guardarcomo.getSelectedFile() + ".txt");
        try {
            BufferedWriter salida = new BufferedWriter(new FileWriter(archivo));
            //salida.write("Prueba a ver si abre");
            salida.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_nuevo_archivoMouseClicked

    private void jb_abrir_archivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_abrir_archivoMouseClicked
        // TODO add your handling code here:
        /*Este archivo_actual esta definido como una variable global en la linea 370 debido que ocupo 
        mantener el archivo para guardar*/
        this.setVisible(false);
        archivo_actual = null;
        FileReader fr = null;
        BufferedReader br = null;
        jTextArea2.setText("");
        try {
            JFileChooser filechooser = new JFileChooser("./");
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de Texto", "txt");
            FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");
            filechooser.setFileFilter(filtro);
            filechooser.addChoosableFileFilter(filtro2);
            int seleccion = filechooser.showOpenDialog(null);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                archivo_actual = filechooser.getSelectedFile();
                fr = new FileReader(archivo_actual);
                br = new BufferedReader(fr);
                String linea;
                jTextArea2.setText("");
                while ((linea = br.readLine()) != null) {
                    jTextArea2.append(linea);
                    jTextArea2.append("\n");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            br.close();
            fr.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        Cargado_ComboBox();
        JD_MenuCampos.pack();
        JD_MenuCampos.setLocationRelativeTo(null);
        JD_MenuCampos.setVisible(true);
    }//GEN-LAST:event_jb_abrir_archivoMouseClicked

    private void jb_guardararchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_guardararchivoMouseClicked
        // TODO add your handling code here:
        FileReader fr = null;
        BufferedReader br = null;
        try {
            fr = new FileReader(archivo_actual);
            br = new BufferedReader(fr);
            jTextArea2.setText("");
            String linea;
            while ((linea = br.readLine()) != null) {
                jTextArea2.append(linea);
            }
            JOptionPane.showMessageDialog(null, "Archivo Guardado Exitosamente");
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            br.close();
            fr.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jb_guardararchivoMouseClicked

    private void jb_salirdemenucamposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_salirdemenucamposMouseClicked
        // TODO add your handling code here:
        JD_MenuCampos.setVisible(false);
        this.setVisible(true);
        /*String opcion_deguardado = JOptionPane.showInputDialog(null, "Desea guardarlo (SI o NO)?");//Este string solo se utiliza para saber si lo quiere guardar antes de cerrar el archivo
        if (opcion_deguardado.equals("SI") || opcion_deguardado.equals("Si") || opcion_deguardado.equals("si") || opcion_deguardado.equals("NO") || opcion_deguardado.equals("No") || opcion_deguardado.equals("no")) {
            if (opcion_deguardado.equals("SI") || opcion_deguardado.equals("Si") || opcion_deguardado.equals("si")) {
                FileWriter fw = null;
                BufferedWriter bw = null;
                FileReader fr = null;
                BufferedReader br = null;
                try {
                    fr = new FileReader(archivo_actual);
                    br = new BufferedReader(fr);
                    fw = new FileWriter(archivo_actual);
                    bw = new BufferedWriter(fw);
                     escribir_archivo(linea);
                    
                    JOptionPane.showMessageDialog(null, "Archivo Guardado Exitosamente");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    bw.close();
                    fw.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                jd_archivo.setVisible(false);
            } else {
                jd_archivo.setVisible(false);
            }
        } else {
            jd_archivo.setVisible(false);
        }*/
    }//GEN-LAST:event_jb_salirdemenucamposMouseClicked

    private void jb_cerrararchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_cerrararchivoMouseClicked
        // TODO add your handling code here:
        String opcion_deguardado = JOptionPane.showInputDialog(this, "Desea guardarlo (SI o NO)?");//Este string solo se utiliza para saber si lo quiere guardar antes de cerrar el archivo
        if (opcion_deguardado.equals("SI") || opcion_deguardado.equals("Si") || opcion_deguardado.equals("si") || opcion_deguardado.equals("NO") || opcion_deguardado.equals("No") || opcion_deguardado.equals("no")) {
            if (opcion_deguardado.equals("SI") || opcion_deguardado.equals("Si") || opcion_deguardado.equals("si")) {
                FileWriter fw = null;
                BufferedWriter bw = null;
                try {
                    fw = new FileWriter(archivo_actual);
                    bw = new BufferedWriter(fw);
                    bw.write(jTextArea2.getText());
                    jTextArea2.setText("");
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Archivo Guardado Exitosamente");
                    archivo_actual = null;
                } catch (Exception e) {
                    e.printStackTrace();
                } // Fin Try Catch
                try {
                    bw.close();
                    fw.close();
                } catch (Exception e) {
                    e.printStackTrace();
                } // Fin Try Catch
                JD_MenuCampos.setVisible(false);
            } else {
                JD_MenuCampos.setVisible(false);
            }
        } else {
            JD_MenuCampos.setVisible(false);
        }
    }//GEN-LAST:event_jb_cerrararchivoMouseClicked

    private void BTN_CrearCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CrearCamposActionPerformed
        // TODO add your handling code here:
        JD_MenuCampos.setVisible(false);
        JD_CrearCampos.setModal(true);
        JD_CrearCampos.pack();
        JD_CrearCampos.setLocationRelativeTo(this);
        JD_CrearCampos.setVisible(true);
    }//GEN-LAST:event_BTN_CrearCamposActionPerformed

    private void BTN_ModificarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ModificarCamposActionPerformed
        // TODO add your handling code here:
        JD_MenuCampos.setVisible(false);
        JD_ModificarCampos.setModal(true);
        JD_ModificarCampos.pack();
        JD_ModificarCampos.setLocationRelativeTo(this);
        JD_ModificarCampos.setVisible(true);
    }//GEN-LAST:event_BTN_ModificarCamposActionPerformed

    private void BTN_ListarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ListarCamposActionPerformed
        // TODO add your handling code here:
        try {
            TA_ListarCampos.setText("");
            FileReader fr = null;
            BufferedReader br = null;
            try {
                fr = new FileReader(archivo_actual);
                br = new BufferedReader(fr);
                String linea = "";
                String[] lista_campos;
                while ((linea = br.readLine()) != null) {
                    lista_campos = linea.split("&");
                    for (int i = 0; i < lista_campos.length; i++) {
                        System.out.println("listado " + lista_campos[i]);
                        formatear_listado(lista_campos[i]);
                        System.out.println("format " + lista_campos[i]);
                        /*TA_ListarCampos.append(lista_campos[i]);
                        TA_ListarCampos.append("\n");*/
                    }//fin for
                } // Fin While
            } catch (Exception e) {
                e.printStackTrace();
            } // Fin Try Catch
            br.close();
            fr.close();
            JD_MenuCampos.setVisible(false);
            JD_ListarCampos.setModal(true);
            JD_ListarCampos.pack();
            JD_ListarCampos.setLocationRelativeTo(this);
            JD_ListarCampos.setVisible(true);
        } catch (Exception e) {
            System.out.println("error");
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_ListarCamposActionPerformed

    void formatear_listado(String campo_actual) {
        //campo_actual += "¡";
        try {
            String imprimir = "Nombre del Campo: ";
            int cont = 0;//esta variable sirve para contar por cual campo va
            int num_tipo_dato = 0;
            for (int i = 0; i < campo_actual.length(); i++) {
                char caracter_actual = campo_actual.charAt(i);
                if ((caracter_actual + "").equals("¡")) {
                    //imprimir += " - ";
                    cont++;
                    System.out.print("cont: " + cont + "  ");
                    switch (cont) {
                        case 1:
                            i++;
                            imprimir += "\nTipo de Dato: ";
                            num_tipo_dato = Integer.parseInt(campo_actual.charAt(i) + "");
                            String tipo_dato = "";
                            switch (num_tipo_dato) {
                                case 0:
                                    tipo_dato = "int";
                                    break;
                                case 1:
                                    tipo_dato = "byte";
                                    break;
                                case 2:
                                    tipo_dato = "short";
                                    break;
                                case 3:
                                    tipo_dato = "double";
                                    break;
                                case 4:
                                    tipo_dato = "float";
                                    break;
                                case 5:
                                    tipo_dato = "long";
                                    break;
                                case 6:
                                    tipo_dato = "char";
                                    break;
                                case 7:
                                    tipo_dato = "String";
                                    break;
                                case 8:
                                    tipo_dato = "boolean";
                                    break;
                            }//fin switch
                            imprimir += tipo_dato;

                            break;
                        case 2:
                            imprimir += "\nLongitud Maxima: ";
                            break;
                        case 3:
                            imprimir += "\nLongitud Minima: ";
                            break;
                        case 4:
                            i++;
                            if ((campo_actual.charAt(i) + "").equals("T")) {
                                imprimir += "\nLLave: Sí";
                            } else {
                                imprimir += "\nLLave: No";
                            }
                            cont = 0;
                            break;
                    }//*/
                } else if (!(campo_actual.charAt(i) + "").equals("¡")) {
                    //System.out.println(caracter_actual);
                    imprimir += caracter_actual;
                }//fin else
            }//fin for
            imprimir += "\n" + "\n";
            System.out.println("");
            System.out.println(imprimir);
            TA_ListarCampos.append(imprimir);
        } catch (Exception e) {
            System.out.println("error ");
            //e.printStackTrace();
        }
    }//fin método

    private void btn_crear_campoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_crear_campoActionPerformed
        // TODO add your handling code here:
        /*
        int -> 0
        byte -> 1
        short -> 2
        double -> 3
        float -> 4
        long -> 5
        char -> 6
        String -> 7
        boolean -> 8
         */
        String nombre_campo = TF_NombreCampo.getText();
        if (nombre_campo.equals("")) {
            JOptionPane.showMessageDialog(this, "¡Ha dejado el nombre del campo en blanco!");
        } else if (validar_nombre_campo(nombre_campo) == false) {
            JOptionPane.showMessageDialog(this, "¡El nombre del campo no es valido!");
        } else {
            array_nombres_campos.add(nombre_campo);
            String linea = crear_campo(nombre_campo);
            escribir_archivo(linea);
            JOptionPane.showMessageDialog(this, "¡Se ha creado el campo exitosamente!");
            TF_NombreCampo.setText("");
            CB_TipoDeDato.setSelectedIndex(0);
            SP_TamañoMinimo.setValue(0);
            SP_TamañoMaximo.setValue(0);
            RB_LlavePrimariaNo.setSelected(true);
        }//fin else validar nombre campo
        Cargado_ComboBox();
    }//GEN-LAST:event_btn_crear_campoActionPerformed

    private void BTN_RegresarCrearCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_RegresarCrearCamposActionPerformed
        // TODO add your handling code here:
        JD_CrearCampos.setVisible(false);
        JD_MenuCampos.setVisible(true);
    }//GEN-LAST:event_BTN_RegresarCrearCamposActionPerformed

    private void BTN_RegresarListarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_RegresarListarCamposActionPerformed
        // TODO add your handling code here:
        JD_ListarCampos.setVisible(false);
        JD_MenuCampos.setVisible(true);
    }//GEN-LAST:event_BTN_RegresarListarCamposActionPerformed

    private void BTN_RegresarModificarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_RegresarModificarCamposActionPerformed
        // TODO add your handling code here:
        JD_ModificarCampos.setVisible(false);
        JD_MenuCampos.setVisible(true);
    }//GEN-LAST:event_BTN_RegresarModificarCamposActionPerformed

    private void BTN_ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ModificarActionPerformed
        // TODO add your handling code here:
        //modificar();
        try {
            int pos_campo = CB_ModificarCampo.getSelectedIndex();
            String nombre_campo = TF_ModificarCampoNombre.getText();
            if (nombre_campo.equals("")) {
                JOptionPane.showMessageDialog(this, "¡Ha dejado el nombre del campo en blanco!");
            } else if (validar_nombre_campo(nombre_campo) == false) {
                JOptionPane.showMessageDialog(this, "¡El nombre del campo no es valido!");
            } else {
                String modificacion = crear_campo(nombre_campo);//agarro el campo formateado en cadena
                String campos_originales = "";//servira para agarrar todos los campos
                // Forma de Escribir:
                FileReader fr = null;
                BufferedReader br = null;
                fr = null;
                br = null;
                try {
                    fr = new FileReader(archivo_actual);
                    br = new BufferedReader(fr);
                    campos_originales = br.readLine();
                } catch (Exception e) {
                    e.printStackTrace();
                } // Fin Try Catch
                try {
                    br.close();
                    fr.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                } // Fin Try Catch
                String campo_seleccionado = "";//sirve para guardar solo el campo que fue seleccionado
                String[] lista_campos = campos_originales.split("&");
                campo_seleccionado = lista_campos[pos_campo];
                System.out.println("campo original " + campos_originales);
                System.out.println("campo seleccionado " + campo_seleccionado);
                System.out.println("modificar -> " + modificacion);
                System.out.println("modificacion-> " + campos_originales.replaceAll(campo_seleccionado, modificacion.substring(0, modificacion.length() - 2)));
                String campos_modificados
                        = campos_originales.replaceAll(campo_seleccionado, modificacion.substring(0, modificacion.length() - 2));
                actualizar_archivo(campos_modificados);
                JOptionPane.showMessageDialog(this, "¡Se ha modificado el campo con exito!");
                Cargado_ComboBox();
                //actualizar_gui_modificar();
            }//fin if
        } catch (Exception e) {
            System.out.println("stracktrace");
            e.printStackTrace();
        }
    }//GEN-LAST:event_BTN_ModificarActionPerformed

    private void CB_ModificarCampoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_ModificarCampoItemStateChanged
        // TODO add your handling code here:

        actualizar_gui_modificar();
        
    }//GEN-LAST:event_CB_ModificarCampoItemStateChanged

    private void btn_borrar_campoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_borrar_campoActionPerformed
        // TODO add your handling code here:
        //Cargado_ComboBox();
        try {
            int pos_campo = CB_BorrarCampos.getSelectedIndex();
            String modificacion = "";//agarro el campo formateado en cadena
            String campos_originales = "";//servira para agarrar todos los campos 
            FileReader fr = null;
            BufferedReader br = null;
            fr = null;
            br = null;
            try {
                fr = new FileReader(archivo_actual);
                br = new BufferedReader(fr);
                campos_originales = br.readLine();
            } catch (Exception e) {
                e.printStackTrace();
            } // Fin Try Catch
            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            } // Fin Try Catch
            String campo_seleccionado = "";//sirve para guardar solo el campo que fue seleccionado
            String[] lista_campos = campos_originales.split("&");
            campo_seleccionado = lista_campos[pos_campo];
            System.out.println("campo original " + campos_originales);
            System.out.println("campo seleccionado " + campo_seleccionado);
            System.out.println("modificar -> " + modificacion);
            String campos_modificados
                    = campos_originales.replaceAll(campo_seleccionado + "&", "");
            actualizar_archivo(campos_modificados);
            JOptionPane.showMessageDialog(this, "¡Se ha eliminado el campo con exito!");
            Cargado_ComboBox();
        } catch (Exception e) {
            System.out.println("stracktrace");
            e.printStackTrace();
        }//fin try catch
    }//GEN-LAST:event_btn_borrar_campoActionPerformed

    private void btn_regresar_borrar_camposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_regresar_borrar_camposActionPerformed
        // TODO add your handling code here:
        JD_BorrarCampos.setVisible(false);
        JD_MenuCampos.setVisible(true);
    }//GEN-LAST:event_btn_regresar_borrar_camposActionPerformed

    void actualizar_gui_modificar() {//error***
        int pos_campo = CB_ModificarCampo.getSelectedIndex();
        if (pos_campo <= CB_ModificarCampo.getItemCount() - 1) {
            String campo_seleccionado = "";
            String[] lista_campos = new String[CB_ModificarCampo.getItemCount()];
            try {
                FileReader fr = null;
                BufferedReader br = null;
                try {
                    fr = new FileReader(archivo_actual);
                    br = new BufferedReader(fr);
                    String linea = "";
                    while ((linea = br.readLine()) != null) {
                        lista_campos = linea.split("&");
                    } // Fin While
                } catch (Exception e) {
                    System.out.println("saludos ");
                    e.printStackTrace();
                } // Fin Try Catch
                br.close();
                fr.close();
                campo_seleccionado = lista_campos[pos_campo];
                System.out.println(campo_seleccionado);
                String[] atributos_campo = campo_seleccionado.split("¡");
                for (int i = 0; i < atributos_campo.length; i++) {
                    switch (i) {
                        case 0:
                            TF_ModificarCampoNombre.setText(atributos_campo[i]);
                            break;
                        case 1:
                            int x = Integer.parseInt(atributos_campo[i]);
                            //CB_ModificarTipoDato.set;
                            break;
                        case 2:
                            SP_ModificarMinimo.setValue(Double.parseDouble(atributos_campo[i]));
                            break;
                        case 3:
                            SP_ModificarMaximo.setValue(Double.parseDouble(atributos_campo[i]));
                            break;
                        case 4:
                            if (atributos_campo[i].equals("T")) {
                                RB_ModificarLlaveNo.setSelected(false);
                                RB_ModificarLlaveSi.setSelected(true);
                            } else {
                                RB_ModificarLlaveSi.setSelected(false);
                                RB_ModificarLlaveNo.setSelected(true);
                            }
                            break;
                    }//fin switch    
                }//fin for atributos_campo

            } catch (Exception e) {//revisar porque sale
                System.out.println("error ");
                //e.printStackTrace();
            } // Fin Try Catch
        }//fin if
    }

    String crear_campo(String nombre_campo) {
        System.out.println(CB_TipoDeDato.getSelectedItem().toString());
        double longitud_minima = Double.parseDouble(SP_TamañoMinimo.getValue() + ""),
                longitud_maxima = Double.parseDouble(SP_TamañoMaximo.getValue() + "");
        boolean llave_primaria = false;
        if (RB_LlavePrimariaSi.isSelected()) {
            llave_primaria = true;
        }
        /*
            F = false
            T = true
         */
        char llave_primaria_siono = 'F';
        if (llave_primaria) {
            llave_primaria_siono = 'T';
        }
        int codigo_tipo_dato = 0;
        switch (CB_TipoDeDato.getSelectedItem().toString()) {
            case "byte":
                codigo_tipo_dato = 1;
                break;
            case "short":
                codigo_tipo_dato = 2;
                break;
            case "double":
                codigo_tipo_dato = 3;
                break;
            case "float":
                codigo_tipo_dato = 4;
                break;
            case "long":
                codigo_tipo_dato = 5;
                break;
            case "char":
                codigo_tipo_dato = 6;
                break;
            case "String":
                codigo_tipo_dato = 7;
                break;
            case "boolean":
                codigo_tipo_dato = 8;
                break;
        }
        String linea
                = nombre_campo + "¡"
                + (codigo_tipo_dato + "¡")
                + (longitud_minima + "¡")
                + (longitud_maxima + "¡")
                + llave_primaria_siono + "&";
        return linea;
    }

    String modificar_campo(String nombre_campo) {
        //System.out.println(CB_TipoDeDato.getSelectedItem().toString());
        double longitud_minima = Double.parseDouble(SP_ModificarMinimo.getValue() + ""),
                longitud_maxima = Double.parseDouble(SP_ModificarMaximo.getValue() + "");
        boolean llave_primaria = false;
        if (RB_ModificarLlaveSi.isSelected()) {
            llave_primaria = true;
        }
        /*
            F = false
            T = true
         */
        char llave_primaria_siono = 'F';
        if (llave_primaria) {
            llave_primaria_siono = 'T';
        }
        int codigo_tipo_dato = 0;
        switch (CB_ModificarTipoDato.getSelectedItem().toString()) {
            case "byte":
                codigo_tipo_dato = 1;
                break;
            case "short":
                codigo_tipo_dato = 2;
                break;
            case "double":
                codigo_tipo_dato = 3;
                break;
            case "float":
                codigo_tipo_dato = 4;
                break;
            case "long":
                codigo_tipo_dato = 5;
                break;
            case "char":
                codigo_tipo_dato = 6;
                break;
            case "String":
                codigo_tipo_dato = 7;
                break;
            case "boolean":
                codigo_tipo_dato = 8;
                break;
        }//fin switch
        String linea
                = nombre_campo + "¡"
                + (codigo_tipo_dato + "¡")
                + (longitud_minima + "¡")
                + (longitud_maxima + "¡")
                + llave_primaria_siono + "&";
        return linea;
    }

    boolean validar_nombre_campo(String nombre_campo) {// *validar que no esté vacio*
        for (int i = 0; i < array_nombres_campos.size(); i++) {
            if (nombre_campo.equals(array_nombres_campos.get(i))) {
                return false;
            } // Fin If
        } // Fin For
        return true;
    } // Fin Validar Nombre Campo

    void escribir_archivo(String linea) {
        // Forma de Escribir:
        FileWriter fw = null;
        BufferedWriter bw = null;
        try {
            //archivo = new File("./salida.txt");
            //fw = new FileWriter(archivo_actual); // Sobreescribe 
            fw = new FileWriter(archivo_actual, true); // Respeta el contenido
            bw = new BufferedWriter(fw);
            bw.write(linea);
            //bw.newLine(); ocupamos que escriba derecho para evitar fragmentacion, por eso la comentamos
            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }//fin try catch
    }//fin método

    void actualizar_archivo(String campos_modificados) {
        // Forma de Escribir:
        FileWriter fw = null;
        BufferedWriter bw = null;
        try {
            //archivo = new File("./salida.txt");
            fw = new FileWriter(archivo_actual); // Sobreescribe 
            fw = new FileWriter(archivo_actual, true); // Respeta el contenido
            bw = new BufferedWriter(fw);
            bw.write(campos_modificados);
            //bw.newLine(); ocupamos que escriba derecho para evitar fragmentacion, por eso la comentamos
            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }//fin try catch
    }

    void Cargado_ComboBox() {
        FileReader fr = null;
        BufferedReader br = null;
        try {
            fr = new FileReader(archivo_actual);
            br = new BufferedReader(fr);
            String linea = "";
            String[] lista_campos;
            //DefaultComboBoxModel modelo_modificar = (DefaultComboBoxModel) CB_ModificarCampo.getModel();
            DefaultComboBoxModel modelo_modificar = new DefaultComboBoxModel();
            DefaultComboBoxModel modelo_borrar = new DefaultComboBoxModel();
            //DefaultComboBoxModel modelo_borrar = (DefaultComboBoxModel) CB_BorrarCampos.getModel();
            CB_ModificarCampo.removeAllItems();
            CB_BorrarCampos.removeAllItems();
            modelo_borrar = (DefaultComboBoxModel) CB_BorrarCampos.getModel();
            modelo_modificar = (DefaultComboBoxModel) CB_ModificarCampo.getModel();
            while ((linea = br.readLine()) != null) {
                lista_campos = linea.split("&");
                for (int i = 0; i < lista_campos.length; i++) {
                    modelo_modificar.addElement(lista_campos[i]);
                    modelo_borrar.addElement(lista_campos[i]);
                } // Fin For
            } // Fin While
            CB_ModificarCampo.setModel(modelo_modificar);
            CB_BorrarCampos.setModel(modelo_borrar);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            br.close();
            fr.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        } // Fin Try Catch
    }//*/

    /*void Cargado_ComboBox() {//NO BORRAR POR SI SE ARRUINA
        FileReader fr = null;
        BufferedReader br = null;
        try {
            fr = new FileReader(archivo_actual);
            br = new BufferedReader(fr);
            String linea = "";
            String[] lista_campos;
            DefaultComboBoxModel modelo_modificar = (DefaultComboBoxModel) CB_ModificarCampo.getModel();
            DefaultComboBoxModel modelo_borrar = (DefaultComboBoxModel) CB_BorrarCampos.getModel();
            while ((linea = br.readLine()) != null) {
                lista_campos = linea.split("&");
                for (int i = 0; i < lista_campos.length; i++) {
                    modelo_modificar.addElement(lista_campos[i]);
                    modelo_borrar.addElement(lista_campos[i]);
                    CB_ModificarCampo.setModel(modelo_modificar);
                    CB_BorrarCampos.setModel(modelo_borrar);
                } // Fin For
            } // Fin While
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            br.close();
            fr.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        } // Fin Try Catch
    }//fin método*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui_del_proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui_del_proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui_del_proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui_del_proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui_del_proyecto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_BorrarCampos;
    private javax.swing.JButton BTN_CrearCampos;
    private javax.swing.JButton BTN_ListarCampos;
    private javax.swing.JButton BTN_Modificar;
    private javax.swing.JButton BTN_ModificarCampos;
    private javax.swing.JButton BTN_RegresarCrearCampos;
    private javax.swing.JButton BTN_RegresarListarCampos;
    private javax.swing.JButton BTN_RegresarModificarCampos;
    private javax.swing.JComboBox<String> CB_BorrarCampos;
    private javax.swing.JComboBox<String> CB_ModificarCampo;
    private javax.swing.JComboBox<String> CB_ModificarTipoDato;
    private javax.swing.JComboBox<String> CB_TipoDeDato;
    private javax.swing.JDialog JD_BorrarCampos;
    private javax.swing.JDialog JD_CrearCampos;
    private javax.swing.JDialog JD_ListarCampos;
    private javax.swing.JDialog JD_MenuCampos;
    private javax.swing.JDialog JD_ModificarCampos;
    private javax.swing.JRadioButton RB_LlavePrimariaNo;
    private javax.swing.JRadioButton RB_LlavePrimariaSi;
    private javax.swing.JPanel RB_ModificarLlaveNO;
    private javax.swing.JRadioButton RB_ModificarLlaveNo;
    private javax.swing.JRadioButton RB_ModificarLlaveSi;
    private javax.swing.JSpinner SP_ModificarMaximo;
    private javax.swing.JSpinner SP_ModificarMinimo;
    private javax.swing.JSpinner SP_TamañoMaximo;
    private javax.swing.JSpinner SP_TamañoMinimo;
    private javax.swing.JTextArea TA_ListarCampos;
    private javax.swing.JTextField TF_ModificarCampoNombre;
    private javax.swing.JTextField TF_NombreCampo;
    private javax.swing.JButton btn_borrar_campo;
    private javax.swing.JButton btn_crear_campo;
    private javax.swing.JButton btn_regresar_borrar_campos;
    private javax.swing.ButtonGroup btng_llave;
    private javax.swing.ButtonGroup btng_modificar_llave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jP_borrar_campos;
    private javax.swing.JPanel jP_crear_campos;
    private javax.swing.JPanel jP_listar_campos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private java.awt.Button jb_abrir_archivo;
    private javax.swing.JButton jb_cerrararchivo;
    private javax.swing.JButton jb_guardararchivo;
    private java.awt.Button jb_nuevo_archivo;
    private java.awt.Button jb_salir;
    private javax.swing.JButton jb_salirdemenucampos;
    // End of variables declaration//GEN-END:variables
    private File archivo_actual;
    ArrayList<String> array_nombres_campos = new ArrayList();
}
